import pandas as pd
import streamlit as st
from utils import load_file
import random


def show_ten_videos(df_video, number_videos_from_cat):
    st.markdown(
        "<h3>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</h3>", unsafe_allow_html=True
    )

    # –ü—É—Å—Ç–æ–π DataFrame –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
    ten_videos_df = pd.DataFrame()
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º N –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∏–¥–µ–æ
    for _, row in number_videos_from_cat.iterrows():
        # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        # if "group" not in st.session_state:
        #     st.session_state.group = random.choice(["A", "B"])
        # if st.session_state.group == "A":
        #     category = random.choice(df_video["category_id"].unique())
        #     N = 1
        # elif st.session_state.group == "B":
        #     category = row["category_id"]
        #     N = row["N"]
        category = random.choice(
            df_video["category_id"].unique()
        )  # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        N = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –¥–ª—è –≤—ã–±–æ—Ä–∞

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        filtered_videos = df_video[df_video["category_id"] == category].sort_values(
            by=["cmments_per_day", "v_long_views_7_days"],
            ascending=(False, False),
        )
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ N –≤–∏–¥–µ–æ
        top_videos = filtered_videos.iloc[:N]
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Ç–æ–≥–æ–≤—ã–π DataFrame
        ten_videos_df = pd.concat([ten_videos_df, top_videos])
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    ten_videos_df = ten_videos_df.reset_index(drop=True)
    # st.write(ten_videos_df)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 10 –≤–∏–¥–µ–æ
    col1, col2 = st.columns(2)
    for index, row in ten_videos_df.iterrows():
        with col1 if index % 2 == 0 else col2:
            st.markdown(
                f"""
            <div style="background-color: #f5f5f5; border-radius: 10px; padding: 20px; margin-bottom: 20px; width: 100%; height: 150px; display: flex; flex-direction: column; justify-content: space-between;">
                <div style="font-size: 16px; font-weight: bold; color: #333; text-align: center;">{row['title']} üìΩ</div>
                <div style="text-align: center; color: #999;">–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {row['v_year_views']} üëÄ</div>
                <div style="text-align: center; color: #666;">–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {pd.to_datetime(row['v_pub_datetime'], unit='s').strftime('%Y-%m-%d %H:%M')} üìÜ</div>
            </div>
            """,
                unsafe_allow_html=True,
            )

    ten_video_titles = ten_videos_df["title"].tolist()  # –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≤–∏–¥–µ–æ
    ten_video_ids = ten_videos_df["video_id"].tolist()  # –°–ø–∏—Å–æ–∫ ID –≤–∏–¥–µ–æ
    st.session_state.df_video = df_video[
        ~(df_video["video_id"].isin(ten_videos_df["video_id"]))
    ].copy()  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ DataFrame —Å –≤–∏–¥–µ–æ

    with st.form("select_video_form"):
        selected_option = st.selectbox(
            "–í—ã–±–æ—Ä –≤–∏–¥–µ–æ", options=ten_video_titles, key="video_selectbox"
        )
        selected_video_index = ten_video_titles.index(
            selected_option
        )  # –ò–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        selected_video_id = ten_video_ids[selected_video_index]  # ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        select_button = st.form_submit_button(label="–ü—Ä–æ—Å–º–æ—Ç—Ä")  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞

        if select_button:
            st.session_state.selected_video = (
                selected_video_id  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –≤ session_state
            )
            st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã


def show_video_info(df_video, user_id):
    interactions = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    video_card = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ

    if st.session_state.selected_video:
        video_card = df_video[df_video["video_id"] == st.session_state.selected_video]

        if video_card.empty:
            st.session_state.selected_video = (
                None  # –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            )
            video_card = None
        else:
            video_card = video_card.iloc[
                0
            ]  # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∏–¥–µ–æ

        st.markdown("<hr>", unsafe_allow_html=True)  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        with st.form(f"Video_{video_card['video_id']}"):
            st.markdown(
                f"""
            <div style="background-color: #f5f5f5; border-radius: 10px; padding: 20px; margin-bottom: 20px;">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <h3 style="color: #333; margin-bottom: 0;">{video_card['title']} üìΩ</h3>
                </div>
                <p style="color: #666; margin-bottom: 10px;">{pd.to_datetime(video_card['v_pub_datetime']).strftime('%Y-%m-%d %H:%M')} üìÜ</p>
                <div style="display: flex; justify-content: space-between; color: #999;">
                    <p>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {video_card['category_id']} üîñ</p>
                    <p>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {video_card['v_total_comments']} üí¨</p>
                </div>
                <div style="display: flex; justify-content: space-between; color: #999;">
                    <p>–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {video_card['v_year_views']} üëÄ</p>
                    <p>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {round(video_card['v_duration'] / 60, 2)} –º–∏–Ω üï∞</p>
                    <p>–õ–∞–π–∫–∏: {video_card['v_likes']} üëç</p>
                    <p>–î–∏–∑–ª–∞–π–∫–∏: {video_card['v_dislikes']} üëé</p>
                </div>
            </div>
            """,
                unsafe_allow_html=True,
            )

            like_dislike = st.selectbox(
                label="–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É",
                options=["–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏", "–õ–∞–π–∫", "–î–∏–∑–ª–∞–π–∫"],
                key=f"like_dislike_{video_card['video_id']}",
            )
            comment = st.checkbox(
                "–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", key=f"comment_{video_card['video_id']}"
            )

            submit_button = st.form_submit_button(label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å")  # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏

            if submit_button:
                if like_dislike == "–õ–∞–π–∫":
                    interactions.append((video_card, "like"))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∞–π–∫–∞
                elif like_dislike == "–î–∏–∑–ª–∞–π–∫":
                    interactions.append((video_card, "dislike"))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∑–ª–∞–π–∫–∞
                else:
                    interactions.append(
                        (video_card, "no_like_either_dislike")
                    )  # –ë–µ–∑ –æ—Ü–µ–Ω–∫–∏
                if comment:
                    interactions.append(
                        (video_card, "comment")
                    )  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è

                st.session_state.interactions_data = log_user_interaction(
                    interactions, user_id
                )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
                st.success(
                    "–í–∞—à–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
                )  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
                st.session_state.selected_video = None  # –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
                st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        # –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –≤–Ω–µ —Ñ–æ—Ä–º—ã –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if st.button("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
            st.session_state.selected_video = None  # –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
            st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é


def log_user_interaction(interactions, user_id):
    try:
        user_interactions_df = load_file(
            path="user_interactions.csv", file_type="csv"
        )  # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        user_interactions_df = pd.DataFrame(
            columns=["user_id", "video_id", "category_id", "interaction_type"]
        )  # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ DataFrame –ø—Ä–∏ –æ—à–∏–±–∫–µ

    new_interactions = [
        {
            "user_id": user_id,
            "video_id": video_row["video_id"],
            "category_id": video_row[
                "category_id"
            ],  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å "video_id" –Ω–∞ "category_id"
            "interaction_type": interaction_type,
        }
        for video_row, interaction_type in interactions
    ]  # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π

    user_interactions_df = pd.concat(
        [user_interactions_df, pd.DataFrame(new_interactions)], ignore_index=True
    )  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
    user_interactions_df.to_csv(
        "user_interactions.csv", mode="w", index=False
    )  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV

    return user_interactions_df  # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ DataFrame
